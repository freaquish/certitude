# Generated by Django 3.0.8 on 2020-10-29 04:49

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.gis.geos.point
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('account_id', models.CharField(default='account_id', max_length=20, primary_key=True, serialize=False)),
                ('id_type', models.CharField(default='PHONE', max_length=6)),
                ('joined_at', models.DateField(default=datetime.date(2020, 10, 29))),
                ('username', models.CharField(db_index=True, default='', max_length=30, unique=True)),
                ('first_name', models.CharField(default='', max_length=30)),
                ('last_name', models.CharField(default='', max_length=30)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('comfort_zones_text', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=70), default=list, size=None)),
                ('activity_coords', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('avatar', models.TextField()),
                ('places', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('influencer', models.BooleanField(default=False)),
                ('influencing_hobby', models.CharField(default='', max_length=20)),
                ('hobby_map', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('primary_hobby', models.CharField(default='', max_length=20)),
                ('primary_weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('follower_count', models.IntegerField(default=0)),
                ('following_count', models.IntegerField(default=0)),
                ('saves', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('friend_count', models.IntegerField(default=0)),
                ('friend_requests', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, size=None)),
                ('description', models.TextField()),
                ('following', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('friend', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('current_coord', django.contrib.gis.db.models.fields.PointField(default=django.contrib.gis.geos.point.Point(0, 0, srid=4326), srid=4326)),
                ('new_notification', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActionStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.CharField(db_index=True, default='', max_length=50)),
                ('post_id', models.CharField(db_index=True, default='', max_length=25)),
                ('loved', models.BooleanField(default=False)),
                ('loved_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 789555, tzinfo=utc))),
                ('viewed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 789687, tzinfo=utc))),
                ('shared', models.BooleanField(default=False)),
                ('saved', models.BooleanField(default=False)),
                ('commented', models.BooleanField(default=False)),
                ('up_voted', models.BooleanField(default=False)),
                ('down_voted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('community_id', models.CharField(default='', max_length=26, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('tag', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('hobbies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('image', models.TextField()),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 804412, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('competition_id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('tag', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('competitions_banner', models.TextField()),
                ('start_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 809390, tzinfo=utc))),
                ('end_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 809504, tzinfo=utc))),
                ('hobbies', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('is_global', models.BooleanField(default=False)),
                ('result_date', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 809701, tzinfo=utc))),
                ('is_unique_post', models.BooleanField(default=False)),
                ('submission_per_user', models.IntegerField(default=0)),
                ('rules_policy', models.TextField()),
                ('number_post_submitted', models.IntegerField(default=0)),
                ('community', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='insight.Community')),
            ],
        ),
        migrations.CreateModel(
            name='Hobby',
            fields=[
                ('code_name', models.CharField(default='', max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=40)),
                ('editors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('limits', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('weight', models.DecimalField(decimal_places=3, default=0.0, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration_type', models.CharField(default='weekly', max_length=8)),
                ('start_date', models.DateField(default=datetime.date(2020, 10, 29))),
                ('end_date', models.DateField(default=datetime.date(2020, 10, 29))),
                ('hobby', models.CharField(default='', max_length=20)),
                ('hobby_name', models.CharField(default='', max_length=30)),
                ('rank_list', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Places',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_name', models.TextField()),
                ('city', models.TextField()),
                ('coords', django.contrib.gis.db.models.fields.PointField(default=django.contrib.gis.geos.point.Point(0, 0), srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.CharField(default='', max_length=22, primary_key=True, serialize=False)),
                ('username', models.CharField(default='', max_length=30)),
                ('editor', models.CharField(max_length=14)),
                ('assets', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('caption', models.TextField()),
                ('hastags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('last_activity_on', models.DateField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 786581, tzinfo=utc))),
                ('atags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('coords', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name=django.contrib.gis.geos.point.Point(0, 0, srid=4326))),
                ('action_count', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 787132, tzinfo=utc))),
                ('rank', models.IntegerField(default=0)),
                ('score', models.DecimalField(decimal_places=3, default=0.0, max_digits=7)),
                ('is_global', models.BooleanField(default=True)),
                ('account', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hobby', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='insight.Hobby')),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('tag', models.TextField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 794587, tzinfo=utc))),
                ('first_used', models.CharField(default='', max_length=22)),
            ],
        ),
        migrations.CreateModel(
            name='UserPostComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.CharField(default='', max_length=22)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 798895, tzinfo=utc))),
                ('count', models.IntegerField(default=0)),
                ('account', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 807213, tzinfo=utc))),
                ('position', models.TextField()),
                ('description', models.TextField()),
                ('is_head', models.BooleanField(default=False)),
                ('account', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, related_name='team_account', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='team_community', to='insight.Community')),
            ],
        ),
        migrations.CreateModel(
            name='ScorePost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=3, default=0.0, max_digits=7)),
                ('freshness_score', models.DecimalField(decimal_places=7, default=0.0, max_digits=9)),
                ('net_score', models.DecimalField(decimal_places=3, default=0.0, max_digits=7)),
                ('rank', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 800837, tzinfo=utc))),
                ('last_modified', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 800935, tzinfo=utc))),
                ('post', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='insight.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Scoreboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=datetime.date(2020, 10, 29))),
                ('expires_on', models.DateField(default=datetime.date(2020, 10, 29))),
                ('hobby_scores', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('retention', models.DecimalField(decimal_places=5, default=0.0, max_digits=9)),
                ('net_score', models.DecimalField(decimal_places=4, default=0.0, max_digits=8)),
                ('rank', models.IntegerField(default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RankBadge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_name', models.TextField()),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 796969, tzinfo=utc))),
                ('total', models.IntegerField(default=0)),
                ('rank', models.IntegerField(default=0)),
                ('score', models.DecimalField(decimal_places=3, default=0.0, max_digits=7)),
                ('account', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('hobby', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='insight.Hobby')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('noti_id', models.CharField(default='', max_length=35, primary_key=True, serialize=False)),
                ('type', models.CharField(default='ALERT', max_length=5)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('header', models.TextField()),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 791430, tzinfo=utc))),
                ('body', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('used', models.BooleanField(default=False)),
                ('to', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 813117, tzinfo=utc))),
                ('competition', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='competition_post_competition', to='insight.Competition')),
                ('post', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='competition_post_post', to='insight.Post')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 811599, tzinfo=utc))),
                ('community', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='community_post_community', to='insight.Community')),
                ('post', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='community_post_post', to='insight.Post')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2020, 10, 29, 4, 49, 40, 805513, tzinfo=utc))),
                ('is_team_member', models.BooleanField(default=False)),
                ('is_team_head', models.BooleanField(default=False)),
                ('account', models.ForeignKey(default='account_id', on_delete=django.db.models.deletion.CASCADE, related_name='community_member_account', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='community_member_community', to='insight.Community')),
            ],
        ),
    ]
